/*!
 * A few variables that I like to use
 * jQuery is loaded
 * Breakpoints based loading happens at the bottom
*/
var win = $(window), doc = $(document), bod = $('body');

/*!
 * PubSub - A Publish and Subscribe Event Model
 * Copyright (c) 2014 Digital Surgeons- http://digitalsurgeons.com
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */
var PubSub=PubSub||{subscriptions:{},Group:function(){var e=[];this.subscribe=function(t,n){e.push(PubSub.subscribe(t,n))};this.destroy=function(){for(var t in e){PubSub.unsubscribe(e[t])}e=null}},subscribe:function(e,t){var n=e.split(".");var r=this.subscriptions;for(var i=0;i<n.length;i++){if(!r.hasOwnProperty(n[i])){r[n[i]]={subscriptions:[]}}r=r[n[i]]}r.subscriptions.push({Event:e,Callback:t});return e+"-"+(r.subscriptions.length-1)},publish:function(e,t){var n=e.split(".");var r=this.subscriptions;for(var i=0;i<n.length;i++){if(!r.hasOwnProperty(n[i])){return false}r=r[n[i]];if(r.hasOwnProperty("*")){this.fireSubscriptions(r["*"],e,t)}}this.fireSubscriptions(r,e,t)},fireSubscriptions:function(e,t,n){if(!e){return false}for(var r=0;r<e.subscriptions.length;r++){e.subscriptions[r].Callback({event:t,id:t+"-"+r,data:n})}},unsubscribe:function(e){var t=e.split("-");var n=t[0].split(".");var r=t[1];var i=this.subscriptions;for(var s=0;s<n.length;s++){i=i[n[s]]}if(i.subscriptions[r]){i.subscriptions.splice(r,1)}}};

/*!
 * Math Utils - Handy for porting a value of one range to its same proportion in another range
 * Copyright (c) 2014 Digital Surgeons- http://digitalsurgeons.com
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */
var Mathutils= Mathutils||{normalize:function(e,t,n){return(e-t)/(n-t)},interpolate:function(e,t,n){return t+(n-t)*e},map:function(e,t,n,r,i){if(e<t){e=t}if(e>n){e=n}var s=this.interpolate(this.normalize(e,t,n),r,i);return s}}

/*!
 * PreLoader - A tool for loading. Really.
 * Check out http://jsbin.com/fuduf/3/edit for how to run it.
 * Copyright (c) 2014 Digital Surgeons- http://digitalsurgeons.com
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */
var BulkLoad=BulkLoad||function(e){function t(e,t,n){var r=t;var i=e;var s=PubSub.subscribe("PreLoader.CANCEL",function(e){PubSub.unsubscribe(s);o.src="";o.onload=undefined;o=undefined});var o=new Image;o.onload=function(){n(o,r);PubSub.unsubscribe(s);s=undefined};o.src=e}function n(n){function u(t,u){s[u]=true;r[u]=t;o++;if(e.hasOwnProperty("onProgress")){e.onProgress({loaded:o,total:n.length,percentage:o/n.length*100,id:u,data:t})}for(i=0;i<s.length;i++){if(s[i]===false){return}}e.onComplete(r)}var r=[],i;var s=[];for(i=0;i<n.length;i++){s[i]=false}for(i=0;i<n.length;i++){new t(n[i],i,u)}var o=0}new n(e.assets)};

/*
Function loadScript - append a script element at the bottom the DOM with jQuery
src - [String] URI of script to include
group - (Optional) [String] identifier for grouping of scripts

Function unloadScripts
group - [String] identifier of group to unload
*/
var loadScript=loadScript||function(src,group){bod.append('<script class="'+group+'" src="'+src+'"><\/script>');}
var unloadScripts=unloadScripts||function(group){$(group).remove();}

/*!
 * enquire.js v2.1.0 - Awesome Media Queries in JavaScript
 * Copyright (c) 2014 Nick Williams - http://wicky.nillia.ms/enquire.js
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */
!function(a,b,c){var d=window.matchMedia;"undefined"!=typeof module&&module.exports?module.exports=c(d):"function"==typeof define&&define.amd?define(function(){return b[a]=c(d)}):b[a]=c(d)}("enquire",this,function(a){"use strict";function b(a,b){var c,d=0,e=a.length;for(d;e>d&&(c=b(a[d],d),c!==!1);d++);}function c(a){return"[object Array]"===Object.prototype.toString.apply(a)}function d(a){return"function"==typeof a}function e(a){this.options=a,!a.deferSetup&&this.setup()}function f(b,c){this.query=b,this.isUnconditional=c,this.handlers=[],this.mql=a(b);var d=this;this.listener=function(a){d.mql=a,d.assess()},this.mql.addListener(this.listener)}function g(){if(!a)throw new Error("matchMedia not present, legacy browsers require a polyfill");this.queries={},this.browserIsIncapable=!a("only all").matches}return e.prototype={setup:function(){this.options.setup&&this.options.setup(),this.initialised=!0},on:function(){!this.initialised&&this.setup(),this.options.match&&this.options.match()},off:function(){this.options.unmatch&&this.options.unmatch()},destroy:function(){this.options.destroy?this.options.destroy():this.off()},equals:function(a){return this.options===a||this.options.match===a}},f.prototype={addHandler:function(a){var b=new e(a);this.handlers.push(b),this.matches()&&b.on()},removeHandler:function(a){var c=this.handlers;b(c,function(b,d){return b.equals(a)?(b.destroy(),!c.splice(d,1)):void 0})},matches:function(){return this.mql.matches||this.isUnconditional},clear:function(){b(this.handlers,function(a){a.destroy()}),this.mql.removeListener(this.listener),this.handlers.length=0},assess:function(){var a=this.matches()?"on":"off";b(this.handlers,function(b){b[a]()})}},g.prototype={register:function(a,e,g){var h=this.queries,i=g&&this.browserIsIncapable;return h[a]||(h[a]=new f(a,i)),d(e)&&(e={match:e}),c(e)||(e=[e]),b(e,function(b){h[a].addHandler(b)}),this},unregister:function(a,b){var c=this.queries[a];return c&&(b?c.removeHandler(b):(c.clear(),delete this.queries[a])),this}},new g});

/*!
 * Breakpoint reference - CSS-Tricks
 * http://css-tricks.com/snippets/css/media-queries-for-standard-devices/
 */
var breakpoints = {
	medium: {
		mediaQuery: "only screen and (max-width : 1024px)",
		file: "js/medium.min.js"
	},
	large: {
		mediaQuery: "only screen and (min-width : 1025px)",
		file: "js/large.min.js"
	}		
};

/*!
 * Breakpoint Build
 * Loop through breakpoints and load the files for each match
 * PubSub events are published for Enquire.BREAKPOINTNAME_MATCH, and Enquire.BREAKPOINTNAME_UNMATCH
 *  ...that the loaded file can respond to
 */
for(var i in breakpoints){
	enquire.register( breakpoints[i].mediaQuery, {
		deferSetup: true,
		name: i,
		setup: function(){
			loadScript(breakpoints[this.name].file, this.name);
		},
		match: function(){
			PubSub.publish("Enquire." + this.name.toUpperCase() + "_MATCH", {});
		},
		unmatch: function(){
			PubSub.publish("Enquire." + this.name.toUpperCase() + "_UNMATCH", {});
		}
	});
}
